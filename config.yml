# Skungee (Spigot) - The #1 Skript addon for Bungeecord.

# The version is to help determine which version this config is. Please don't modify this value.
version: "1.0.5d"

# Print additional information in the console. The developers of FunkySk may ask you to enable this when reporting an error.
debug: false

# Ignores the packets that spam alot such as GLOBALSCRIPTS and HEARTBEAT in the debug.
# Developers of Skungee may notify you to disable this option when reporting an error.
IgnoreSpamPackets: true

# The details of the Skungee Bungeecord plugin. Place the same login credentials as the Bungeecord Skungee here.
host: "127.0.0.1"
port: 1337

# All security options to protect your Skungee on Bungeecord and Spigot from possible external sources.
# Everything in this section must match the same values as the Skungee config.yml on the Spigot servers.
security:
    password:
        # Should all packets require a password in order to be processed.
        enabled: false
        # Password can't be "hashed" unless instructed too (read below)
        password: "insert password"
        # Should Skungee add a protected hash to the password using a one-way encryption.
        # This makes the password nearly impossible to decode if an external source somehow gets it.
        hash: true
        # If the hashFile option is true, set the password and then restart the server.
        # Skungee will create a hashed file in the Skungee folder location containing your password in a hashed format.
        # Keep in mind that the hash option above needs to be set to true.
        # After the file has been generated, set the password option above to "hashed" (Case sensitive)
        # Skungee will remember your original password until you change the password to anything other than "hashed" and this will be repeated.
        # This creates a more secure system so that if someone invades your servers files, your Skungee password is protected and all your Skungee servers are protected.
        # If you require any assistance with this option, please contact a Skungee developer.
        hashFile: false
        # Choose which algorithm you would like to use for the hash.
        # Algorithms at the time this was written: MD5, SHA-1 and SHA-256 (Strongest)
        hashAlgorithm: "SHA-256"
    encryption:
        # Should Skungee encrypt all sent packets.
        # Currently this only encrypts it in Base64. So the algorithm option below does nothing.
        # Constantly keep nagging at the developers of Skungee to finish this. (Shh I didn't put this here)
        enabled: false
        # Set which Cipher algorithm you would like to use.
        cipherAlgorithm: "AES/CTS/PKCS5Padding"
        # Should Skungee print any errors that may happen.
        # If you come across any errors with encryption, make sure you message the developers of Skungee, and not to users in a public setting.
        printEncryptionErrors: true
    breaches:
        # Breaches are even more added security, Breaches require the password or encryption option to be enabled for this to work.
        # Breaches is a system designed to stop constant failed attempts. Since there is no threshold for how many packets can be sent a tick, this option aims to add
        # security for that. If a(n) IP/Server fails X amount of times, what should Skungee do to protect your server. Choose from the options below.
        enabled: false
        # The amount of times a(n) IP/Server can fail at successfully sending security details.
        attempts: 30
        # Should Skungee shutdown the server if there is such an issue of security breaching?
        # Keep in mind that someone could use this to shutdown your server, this option should only be used if you really trust the security of your server
        # or that you have files and data that you really want to protect. We suggest not enabling it, but it's here for anyone who wants hardcore security.
        # This option is also good to be used if your server is private.
        shutdown: false
        # Should Skungee block the IP/Server from sending packets if it fails X amount of times?
        # This only blocks the IP/Server until the server is restarted again.
        blockAddress: true
        # Should Skungee log all events that meet the settings above in a `log.txt` within the Skungee folder?
        log: true
        # If the log system has picked up any external sources address, you can put it in this list below, and Skungee will remember and always block that address.
        # Don't include the port as they could use a different port.
        blacklisted:
            - 123.456.7.890

# This is how fast the keeping alive packet should be sent back and forth to Skungee.
# The lower this is, the faster the accuracy. (A fast rate would be 5-10) This all depends on your server's network speeds.
# Heartbeat is in ticks
heartbeat: 50

# Contantly keep trying to connect to the Skungee on the Bungeecord. This can spam if the Bungeecord is offline for a long period of time.
# Skungee also makes a bunch of tests before determining if it should shut down when this option is false. So no worries.
reconnect: true

# If the Bungeecord server is no where to be found, run a small non performance enducing task to constantly keep checking when the Bungeecord comes online.
# This option allows to define how long to wait in seconds. Keep in mind that the reconnect option needs to be enabled for this to work.
keepAlive: 10

# The max amount of times Skungee should try to connect to the Skungee on the Bungeecord.
maxAttempts: 20

# This is a queue system to make sure every single packet gets sent. This can cause some delay within the Skript calling code, but very minor. This guarentees every packet to be sent.
# Packets that are expressions will not be put into the queued system as it depends on a returned value.
# So making a queue system for those gets more complex. I might do something about that soon. This will mean that expressions will take priority over effects. Also all effects are sent asynchronous.
Queue:
    enabled: true
    # delay is in milliseconds
    delay: 15
    # Should Skungee sync and control the queue depending on Expressions aswell.
    # Expressions are sent directly when they're called. This option makes sure that Effects aren't sent at the same time as Expressions.
    # If you have hundereds of packets sent within a minute then you might need to set this option to false, as some effects could get backed up.
    sync: true

# Broadcast all the syntax that didn't register to the console.
NotRegisteredSyntax: false

# Converts the Enum's into proper english enums like `FADE_TYPE` will be `fade type` or `fading type` as defined in the english.lang of the jar. (Which can be edited, they parent aliases parsing)
UseEnglishEnums: true

# Disables the message saying FunkySk was enabled.
DisableRegisteredInfo: false

# Disables all messages to the console. Only important stack traces and information logger will be sent.
# If you don't like Skungee constantly notifing what is going on, you can disable this.
DisableConsoleMessages: false

# Disables the colour in the console.
DisableConsoleColour: false

# Sends a message to console stating that a script has been automatically reloaded or created. (This happens when the file on the Bungeecord gets edited/saved)
GlobalScriptMessages: true

# Should Skungee return all players as a UUID to the spigot servers.
# If you run a cracked offline Bungeecord network, it is best to keep this off then.
ReturnUUIDs: true

# When a player is returned from Bungeecord it can't be a Player or ProxiedPlayer because for the Player class, the
# player actually has to be online the server the syntax is calling from, and it can't be ProxiedPlayer because Spigot doesn't have that class.
# So Skungee makes it's own custom system to handle it, and you get these wonderful settings to define how you would like it.
#
# Define in the node below how Skungee should return the value of "players".
#
# The following types are "STRING", "UUID" and "OFFLINEPLAYER" (Capitalization doesn't matter)
# This option is best to keep on "STRING" or "OFFLINEPLAYER" if you have a cracked offline Bungeecord network.
# Else if you run your Bungeecord network with `online_mode`, `ip_forward` and `bungeecord` option true (Online Bungeecord network), the best option would be having it as "OFFLINEPLAYER"
SkungeeReturn: "string"

# If the UUID is present, should Skungee convert to the option above using the UUID. This makes the returned "players" more accurate and less prone to mistakes.
# If you have a cracked offline Bungeecord network, and you're using the "OFFLINEPLAYER" option, set this option to false.
SkungeeReturnUUID: true

# If a syntax returns a number that can be parsed as a timespan, should Skungee convert it into a Timespan?
Timespans: true

# Reciever, this will allow for some syntax to work. Like "evaluate", "server is online", "global scripts" and "network variables".
# This also needs to be enabled in order to run events below.
# Keep in mind that this port must not already be in use. If you run all your servers on the same machine, you will need to make
# the port option different on each Spigot server. Like 1339, 5670, 25567... etc any port that isn't already in use.
Reciever:
    enabled: true
    # The port that the Reciever should run on.
    port: 1338
    # Should Skungee automatically determine which port to use that is open?
    # If this is false it will use the port option above.
    automatic: true
    # Define the range that should be scanned for the Automatic port finder.
    maxPort: 65534
    startingPort: 1000
  
# BETA feature. This isn't properly working at the moment. Use at own risk.
Events: false